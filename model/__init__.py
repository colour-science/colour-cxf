# generated by datamodel-codegen:
#   filename:  PO.jsonschema
#   timestamp: 2025-03-10T15:33:35+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, conint

from . import ProfileType as ProfileType_1


class LocalPart(Enum):
    Colorant = 'Colorant'


class NamespaceURI(Enum):
    https___gist_githubusercontent_com_MichaelMauderer_07abcfc34afeeab77fbbb2a3954b6311_raw_944279dd0d701a3f4ab4ef9b3f2e7e2f7707a078_gistfile1_txt = 'https://gist.githubusercontent.com/MichaelMauderer/07abcfc34afeeab77fbbb2a3954b6311/raw/944279dd0d701a3f4ab4ef9b3f2e7e2f7707a078/gistfile1.txt'


class LocalPart1(Enum):
    PhysicalAttributes = 'PhysicalAttributes'


class LocalPart2(Enum):
    LuminanceUnitsType = 'LuminanceUnitsType'


class LocalPart3(Enum):
    Resources = 'Resources'


class LocalPart4(Enum):
    CustomIlluminant = 'CustomIlluminant'


class LocalPart5(Enum):
    PrivateSpectrum = 'PrivateSpectrum'


class LocalPart6(Enum):
    CxF = 'CxF'


class LocalPart7(Enum):
    ColorDifferenceValues = 'ColorDifferenceValues'


class LocalPart8(Enum):
    Process = 'Process'


class LocalPart9(Enum):
    Width = 'Width'


class LocalPart10(Enum):
    TagCollection = 'TagCollection'


class LocalPart11(Enum):
    x = 'x'


class LocalPart12(Enum):
    Substrate = 'Substrate'


class LocalPart13(Enum):
    SubstrateType = 'SubstrateType'


class LocalPart14(Enum):
    Opacity = 'Opacity'


class LocalPart15(Enum):
    ColorCIExyY = 'ColorCIExyY'


class LocalPart16(Enum):
    ColorCMYKPlusN = 'ColorCMYKPlusN'


class LocalPart17(Enum):
    Method = 'Method'


class LocalPart18(Enum):
    TransmittanceSpectrum = 'TransmittanceSpectrum'


class LocalPart19(Enum):
    Density = 'Density'


class LocalPart20(Enum):
    ColorCIELCh = 'ColorCIELCh'


class LocalPart21(Enum):
    TristimulusSpec = 'TristimulusSpec'


class LocalPart22(Enum):
    Observer = 'Observer'


class LocalPart23(Enum):
    ColorHTML = 'ColorHTML'


class LocalPart24(Enum):
    Object = 'Object'


class LocalPart25(Enum):
    CustomColorSpace = 'CustomColorSpace'


class LocalPart26(Enum):
    CustomAttributeValue = 'CustomAttributeValue'


class LocalPart27(Enum):
    MeasurementType = 'MeasurementType'


class LocalPart28(Enum):
    DeltaCIELab = 'DeltaCIELab'


class LocalPart29(Enum):
    CustomAttributeString = 'CustomAttributeString'


class LocalPart30(Enum):
    ColorSpecification = 'ColorSpecification'


class LocalPart31(Enum):
    DeviceFilter = 'DeviceFilter'


class LocalPart32(Enum):
    Gloss = 'Gloss'


class LocalPart33(Enum):
    MeasurementSpec = 'MeasurementSpec'


class LocalPart34(Enum):
    DeviceClass = 'DeviceClass'


class LocalPart35(Enum):
    SerialNumber = 'SerialNumber'


class LocalPart36(Enum):
    ColorCIEXYZ = 'ColorCIEXYZ'


class LocalPart37(Enum):
    ReflectanceSpectrum = 'ReflectanceSpectrum'


class LocalPart38(Enum):
    ColorValues = 'ColorValues'


class LocalPart39(Enum):
    ColorSRGB = 'ColorSRGB'


class LocalPart40(Enum):
    ColorHSL = 'ColorHSL'


class LocalPart41(Enum):
    CreationDate = 'CreationDate'


class LocalPart42(Enum):
    Y = 'Y'


class LocalPart43(Enum):
    FileInformation = 'FileInformation'


class LocalPart44(Enum):
    Profile = 'Profile'


class LocalPart45(Enum):
    ColorEmissiveCIExyY = 'ColorEmissiveCIExyY'


class LocalPart46(Enum):
    PrivateColorValues = 'PrivateColorValues'


class LocalPart47(Enum):
    ColorEmissiveCIEXYZ = 'ColorEmissiveCIEXYZ'


class LocalPart48(Enum):
    Image = 'Image'


class LocalPart49(Enum):
    ColorAdobeRGB = 'ColorAdobeRGB'


class LocalPart50(Enum):
    Tag = 'Tag'


class LocalPart51(Enum):
    Height = 'Height'


class LocalPart52(Enum):
    Device = 'Device'


class LocalPart53(Enum):
    y = 'y'


class LocalPart54(Enum):
    ObjectCollection = 'ObjectCollection'


class LocalPart55(Enum):
    ColorCIELuv = 'ColorCIELuv'


class LocalPart56(Enum):
    EmissiveSpectrum = 'EmissiveSpectrum'


class LocalPart57(Enum):
    ColorCMYK = 'ColorCMYK'


class LocalPart58(Enum):
    SingleAngleConfiguration = 'SingleAngleConfiguration'


class LocalPart59(Enum):
    ColorCIELab = 'ColorCIELab'


class LocalPart60(Enum):
    ColorSpecificationCollection = 'ColorSpecificationCollection'


class LocalPart61(Enum):
    Y = 'Y'


class LocalPart62(Enum):
    DeviceColorValues = 'DeviceColorValues'


class LocalPart63(Enum):
    x = 'x'


class LocalPart64(Enum):
    ColorNotation = 'ColorNotation'


class LocalPart65(Enum):
    TargetType = 'TargetType'


class LocalPart66(Enum):
    y = 'y'


class LocalPart67(Enum):
    SpotColor = 'SpotColor'


class LocalPart68(Enum):
    DeltaCustom = 'DeltaCustom'


class LocalPart69(Enum):
    ProfileCollection = 'ProfileCollection'


class LocalPart70(Enum):
    CustomSpectrum = 'CustomSpectrum'


class LocalPart71(Enum):
    ColorCustom = 'ColorCustom'


class LocalPart72(Enum):
    ColorPantoneHexachrome = 'ColorPantoneHexachrome'


class LocalPart73(Enum):
    GeometryChoice = 'GeometryChoice'


class LocalPart74(Enum):
    FinishType = 'FinishType'


class LocalPart75(Enum):
    Illuminant = 'Illuminant'


class LocalPart76(Enum):
    ColorRecipe = 'ColorRecipe'


class LocalPart77(Enum):
    CustomResources = 'CustomResources'


class LocalPart78(Enum):
    DeviceIllumination = 'DeviceIllumination'


class LocalPart79(Enum):
    Length = 'Length'


class LocalPart80(Enum):
    ColorDensity = 'ColorDensity'


class LocalPart81(Enum):
    Quantity = 'Quantity'


class LocalPart82(Enum):
    BRDFAngle = 'BRDFAngle'


class LocalPart83(Enum):
    WavelengthRange = 'WavelengthRange'


class LocalPart84(Enum):
    ColorRGB = 'ColorRGB'


class LocalPart85(Enum):
    SpectralPoint = 'SpectralPoint'


class LocalPart86(Enum):
    Thickness = 'Thickness'


class NamespaceURI87(Enum):
    field_ = ''


class Prefix(Enum):
    field_ = ''


class AnyType(BaseModel):
    __root__: Any = Field(
        ...,
        description='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-urType',
    )


class AnySimpleType(BaseModel):
    __root__: Optional[Union[str, float, int, bool]] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#dt-anySimpleType'
    )


class String(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#string'
    )


class NormalizedString(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#normalizedString'
    )


class Token(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#normalizedString'
    )


class Language(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#language'
    )


class Name87(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#Name'
    )


class NCName(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#NCName'

    )

class ID(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#ID'
    )


class IDREF(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#IDREF'
    )


class IDREFS(BaseModel):
    __root__: Optional[List] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#IDREFS'
    )


class ENTITY(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#ENTITY'
    )


class ENTITIES(BaseModel):
    __root__: Optional[List] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#ENTITIES'
    )


class NMTOKEN(BaseModel):
    __root__: Optional[str] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#NMTOKEN'
    )


class NMTOKENS(BaseModel):
    __root__: Optional[List] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#NMTOKENS'
    )


class Boolean(BaseModel):
    __root__: Optional[bool] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#boolean'
    )


class Base64Binary(BaseModel):
    __root__: Optional[List] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#base64Binary'
    )


class HexBinary(BaseModel):
    __root__: Optional[List] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#hexBinary'
    )


class Float(BaseModel):
    __root__: Optional[float] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#float'
    )


class Decimal(BaseModel):
    __root__: Optional[float] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#decimal'
    )


class Integer(BaseModel):
    __root__: Optional[int] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#decimal'
    )


class NonPositiveInteger(BaseModel):
    __root__: Optional[conint(le=0)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#nonPositiveInteger'
    )


class NegativeInteger(BaseModel):
    __root__: Optional[conint(le=-1)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#negativeInteger'
    )


class Long(BaseModel):
    __root__: Optional[conint(ge=-9223372036854775808, le=9223372036854775807)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#long'
    )


class Int(BaseModel):
    __root__: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#int'
    )


class Short(BaseModel):
    __root__: Optional[conint(ge=-32768, le=32767)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#short'
    )


class Byte(BaseModel):
    __root__: Optional[conint(ge=-128, le=127)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#byte'
    )


class NonNegativeInteger(BaseModel):
    __root__: Optional[conint(ge=0)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#nonNegativeInteger'
    )


class UnsignedLong(BaseModel):
    __root__: Optional[conint(ge=0, le=18446744073709551615)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#unsignedLong'
    )


class UnsignedInt(BaseModel):
    __root__: Optional[conint(ge=0, le=4294967295)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#unsignedInt'
    )


class UnsignedShort(BaseModel):
    __root__: Optional[conint(ge=0, le=65535)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#unsignedShort'
    )


class UnsignedByte(BaseModel):
    __root__: Optional[conint(ge=0, le=255)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#unsignedByte'
    )


class PositiveInteger(BaseModel):
    __root__: Optional[conint(ge=1)] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#positiveInteger'
    )


class Double(BaseModel):
    __root__: Optional[float] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#double'
    )


class AnyURI(BaseModel):
    __root__: Optional[AnyUrl] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#anyURI'
    )


class Sign(Enum):
    integer__1 = -1
    integer_1 = 1


class Duration1(BaseModel):
    sign: Optional[Sign] = None
    years: Optional[NonNegativeInteger] = None
    months: Optional[NonNegativeInteger] = None
    days: Optional[NonNegativeInteger] = None
    hours: Optional[NonNegativeInteger] = None
    minutes: Optional[NonNegativeInteger] = None
    seconds: Optional[Decimal] = None


class Duration(BaseModel):
    __root__: Optional[Duration1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#duration'
    )


class DateTime1(BaseModel):
    year: Optional[Integer] = None
    month: Optional[UnsignedByte] = None
    day: Optional[UnsignedByte] = None
    hour: Optional[UnsignedByte] = None
    minute: Optional[UnsignedByte] = None
    second: Optional[UnsignedByte] = None
    fractionalSecond: Optional[Decimal] = None
    timezone: Optional[Integer] = None


class DateTime(BaseModel):
    __root__: Optional[DateTime1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#dateTime'
    )


class Date1(BaseModel):
    year: Optional[Integer] = None
    month: Optional[UnsignedByte] = None
    day: Optional[UnsignedByte] = None
    timezone: Optional[Integer] = None


class Date(BaseModel):
    __root__: Optional[Date1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#date'
    )


class Time1(BaseModel):
    hour: Optional[UnsignedByte] = None
    minute: Optional[UnsignedByte] = None
    second: Optional[UnsignedByte] = None
    fractionalSecond: Optional[Decimal] = None
    timezone: Optional[Integer] = None


class Time(BaseModel):
    __root__: Optional[Time1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#time'
    )


class GYearMonth1(BaseModel):
    year: Optional[Integer] = None
    month: Optional[UnsignedByte] = None
    timezone: Optional[Integer] = None


class GYearMonth(BaseModel):
    __root__: Optional[GYearMonth1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#gYearMonth'
    )


class GYear1(BaseModel):
    year: Optional[Integer] = None
    timezone: Optional[Integer] = None


class GYear(BaseModel):
    __root__: Optional[GYear1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#gYear'
    )


class GMonthDay1(BaseModel):
    month: Optional[UnsignedByte] = None
    day: Optional[UnsignedByte] = None
    timezone: Optional[Integer] = None


class GMonthDay(BaseModel):
    __root__: Optional[GMonthDay1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#gMonthDay'
    )


class GDay1(BaseModel):
    day: Optional[UnsignedByte] = None
    timezone: Optional[Integer] = None


class GDay(BaseModel):
    __root__: Optional[GDay1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#gDay'
    )


class GMonth1(BaseModel):
    month: Optional[UnsignedByte] = None
    timezone: Optional[Integer] = None


class GMonth(BaseModel):
    __root__: Optional[GMonth1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#gMonth'
    )


class ColorCIELCh(BaseModel):
    l: Optional[Double] = Field(..., title='l')
    c: Optional[Double] = Field(..., title='c')
    h: Optional[Double] = Field(..., title='h')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class Tag1(BaseModel):
    pass


class TagCollection(BaseModel):
    tag: Optional[Tag1] = Field(None, title='tag')
    name: Optional[String] = Field(..., title='name')


class CustomAttributeString(BaseModel):
    value: Optional[String] = Field(None, title='value')
    label: Optional[String] = Field(..., title='label')
    method: Optional[String] = Field(None, title='method')


class Gloss(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    method: Optional[String] = Field(None, title='method')


class DE94Type(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    lRatio: Optional[Double] = Field(..., title='lRatio')


class PrivateColorValues(BaseModel):
    value: Optional[Base64Binary] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    keyID: Optional[String] = Field(..., title='keyID')
    measureDate: Optional[DateTime] = Field(None, title='measureDate')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class Tag(BaseModel):
    name: Optional[String] = Field(..., title='name')
    value: Optional[String] = Field(..., title='value')


class ColorCIELab(BaseModel):
    l: Optional[Double] = Field(..., title='l')
    a: Optional[Double] = Field(..., title='a')
    b: Optional[Double] = Field(..., title='b')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class Content(BaseModel):
    pass


class ColorCIExyY(BaseModel):
    content: Content = Field(..., title='content')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class SpotColor(BaseModel):
    pass


class ColorCMYKPlusN(BaseModel):
    cyan: Optional[Double] = Field(..., title='cyan')
    magenta: Optional[Double] = Field(..., title='magenta')
    yellow: Optional[Double] = Field(..., title='yellow')
    black: Optional[Double] = Field(..., title='black')
    spotColor: Optional[SpotColor] = Field(None, title='spotColor')
    profileSpecification: Optional[NCName] = Field(None, title='profileSpecification')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class Tag2(BaseModel):
    pass


class Colorant1(BaseModel):
    pass


class ColorRecipe(BaseModel):
    creationDate: DateTime = Field(..., title='creationDate')
    tag: Optional[Tag2] = Field(None, title='tag')
    substrate: Optional[String] = Field(None, title='substrate')
    process: Optional[String] = Field(None, title='process')
    colorant: Colorant1 = Field(..., title='colorant')
    units: Optional[String] = Field(..., title='units')
    name: Optional[String] = Field(..., title='name')
    comments: Optional[String] = Field(None, title='comments')
    colorSpecification: Optional[NCName] = Field(None, title='colorSpecification')


class Height(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    units: Optional[String] = Field(..., title='units')


class Value(BaseModel):
    pass


class CustomColorSpace(BaseModel):
    value: Value = Field(..., title='value')
    name: Optional[String] = Field(..., title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class BrdfAngle(BaseModel):
    pass


class MultiAngleType(BaseModel):
    brdfAngle: BrdfAngle = Field(..., title='brdfAngle')


class SpotColorType(BaseModel):
    name: Optional[String] = Field(..., title='name')
    percentage: Optional[Double] = Field(..., title='percentage')


class ColorCIELuv(BaseModel):
    l: Optional[Double] = Field(..., title='l')
    u: Optional[Double] = Field(..., title='u')
    v: Optional[Double] = Field(..., title='v')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ReflectanceSpectrumOrTransmittanceSpectrumOrEmissiveSpectrum(BaseModel):
    pass


class ColorValues(BaseModel):
    reflectanceSpectrumOrTransmittanceSpectrumOrEmissiveSpectrum: Optional[
        ReflectanceSpectrumOrTransmittanceSpectrumOrEmissiveSpectrum
    ] = Field(
        None, title='reflectanceSpectrumOrTransmittanceSpectrumOrEmissiveSpectrum'
    )


class DEcmcType(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    lRatio: Optional[Double] = Field(..., title='lRatio')


class ColorHSL(BaseModel):
    hue: Optional[Double] = Field(..., title='hue')
    saturation: Optional[Double] = Field(..., title='saturation')
    lightness: Optional[Double] = Field(..., title='lightness')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ColorAdobeRGB(BaseModel):
    maxRange: Optional[Short] = Field(None, title='maxRange')
    r: Short = Field(..., title='r')
    g: Short = Field(..., title='g')
    b: Short = Field(..., title='b')
    alpha: Optional[Double] = Field(None, title='alpha')
    profileSpecification: Optional[NCName] = Field(None, title='profileSpecification')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class FileInformation(BaseModel):
    creator: Optional[String] = Field(None, title='creator')
    creationDate: Optional[DateTime] = Field(None, title='creationDate')
    description: Optional[String] = Field(None, title='description')
    comment: Optional[String] = Field(None, title='comment')
    tag: Optional[Tag2] = Field(None, title='tag')


class ColorCMYK(BaseModel):
    cyan: Optional[Double] = Field(..., title='cyan')
    magenta: Optional[Double] = Field(..., title='magenta')
    yellow: Optional[Double] = Field(..., title='yellow')
    black: Optional[Double] = Field(..., title='black')
    profileSpecification: Optional[NCName] = Field(None, title='profileSpecification')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ColorNotation(BaseModel):
    notation: Optional[String] = Field(..., title='notation')
    name: Optional[String] = Field(..., title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class EmissiveSpectrum(BaseModel):
    value: Optional[Value] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    measureDate: Optional[DateTime] = Field(None, title='measureDate')
    startWL: Optional[Short] = Field(None, title='startWL')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class DeltaValue(BaseModel):
    pass


class DeltaCustom(BaseModel):
    deltaValue: Optional[DeltaValue] = Field(None, title='deltaValue')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')
    standardRef: NCName = Field(..., title='standardRef')


class ColorHTML(BaseModel):
    name: Optional[String] = Field(None, title='name')
    html: Optional[String] = Field(..., title='html')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ColorPantoneHexachrome(BaseModel):
    cyan: Optional[Double] = Field(..., title='cyan')
    magenta: Optional[Double] = Field(..., title='magenta')
    yellow: Optional[Double] = Field(..., title='yellow')
    black: Optional[Double] = Field(..., title='black')
    orange: Optional[Double] = Field(..., title='orange')
    green: Optional[Double] = Field(..., title='green')
    profileSpecification: Optional[NCName] = Field(None, title='profileSpecification')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class SpectralPoint1(BaseModel):
    pass


class CustomSpectrum(BaseModel):
    spectralPoint: SpectralPoint1 = Field(..., title='spectralPoint')
    name: Optional[String] = Field(None, title='name')
    measureDate: Optional[DateTime] = Field(None, title='measureDate')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class CustomDeltaType(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    label: Optional[String] = Field(..., title='label')


class OtherAttributes(BaseModel):
    pass


class AnyModel(BaseModel):
    pass


class CustomResources(BaseModel):
    otherAttributes: Optional[OtherAttributes] = Field(None, title='otherAttributes')
    any: Optional[AnyModel] = Field(None, title='any')


class Dom(BaseModel):
    __root__: Any


class CustomAttributeValue(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    label: Optional[String] = Field(..., title='label')
    method: Optional[String] = Field(None, title='method')


class Parameters(BaseModel):
    pass


class CustomDataType(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    label: Optional[String] = Field(..., title='label')


class Opacity(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    method: Optional[String] = Field(None, title='method')


class WavelengthRange(BaseModel):
    startWL: Short = Field(..., title='startWL')
    increment: Short = Field(..., title='increment')


class ColorEmissiveCIExyY(BaseModel):
    content: Content = Field(..., title='content')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ColorHTMLOrColorNotationOrColorRGB(BaseModel):
    pass


class DeviceColorValues(BaseModel):
    colorHTMLOrColorNotationOrColorRGB: Optional[ColorHTMLOrColorNotationOrColorRGB] = (
        Field(None, title='colorHTMLOrColorNotationOrColorRGB')
    )


class ImageType(BaseModel):
    value: Optional[Base64Binary] = Field(None, title='value')
    label: Optional[String] = Field(None, title='label')
    imageFileName: Optional[String] = Field(..., title='imageFileName')


class Gloss1(BaseModel):
    pass


class Opacity1(BaseModel):
    pass


class CustomAttributeString1(BaseModel):
    pass


class CustomAttributeValue1(BaseModel):
    pass


class Image(BaseModel):
    pass


class ColorCIEXYZ(BaseModel):
    x: Optional[Double] = Field(..., title='x')
    y: Optional[Double] = Field(..., title='y')
    z: Optional[Double] = Field(..., title='z')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ColorCustom(BaseModel):
    spotColor: SpotColor = Field(..., title='spotColor')
    profileSpecification: Optional[NCName] = Field(None, title='profileSpecification')
    name: Optional[String] = Field(..., title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class DeltaCIELabOrDeltaCustom(BaseModel):
    pass


class ColorDifferenceValues(BaseModel):
    deltaCIELabOrDeltaCustom: Optional[DeltaCIELabOrDeltaCustom] = Field(
        None, title='deltaCIELabOrDeltaCustom'
    )


class Profile(BaseModel):
    pass


class ProfileCollection(BaseModel):
    profile: Optional[Profile] = Field(None, title='profile')


class Thickness(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    units: Optional[String] = Field(..., title='units')


class ColorSRGB(BaseModel):
    maxRange: Optional[Short] = Field(None, title='maxRange')
    r: Short = Field(..., title='r')
    g: Short = Field(..., title='g')
    b: Short = Field(..., title='b')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class BRDFAngle(BaseModel):
    illuminationAngle: Optional[Double] = Field(..., title='illuminationAngle')
    aspecular: Optional[Double] = Field(..., title='aspecular')
    azimuth: Optional[Double] = Field(None, title='azimuth')
    notation: Optional[String] = Field(..., title='notation')


class Illuminant(BaseModel):
    value: Optional[String] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    x: Optional[Double] = Field(None, title='x')
    y: Optional[Double] = Field(None, title='y')
    z: Optional[Double] = Field(None, title='z')


class Object1(BaseModel):
    pass


class ObjectCollection(BaseModel):
    object: Object1 = Field(..., title='object')


class ColorEmissiveCIEXYZ(BaseModel):
    x: Optional[Double] = Field(..., title='x')
    y: Optional[Double] = Field(..., title='y')
    z: Optional[Double] = Field(..., title='z')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class SpdList(BaseModel):
    pass


class CustomIlluminant(BaseModel):
    spdList: Optional[SpdList] = Field(None, title='spdList')
    spectralPoint: Optional[SpectralPoint1] = Field(None, title='spectralPoint')
    name: Optional[String] = Field(None, title='name')
    wlStart: Optional[Short] = Field(None, title='wlStart')
    listIncrement: Optional[Short] = Field(None, title='listIncrement')


class TagCollection1(BaseModel):
    pass


class Width(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    units: Optional[String] = Field(..., title='units')


class DE2000Type(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    lRatio: Optional[Double] = Field(..., title='lRatio')


class ColorSpecification1(BaseModel):
    pass


class ColorSpecificationCollection(BaseModel):
    colorSpecification: ColorSpecification1 = Field(..., title='colorSpecification')


class SpectralPoint(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    wl: Optional[Double] = Field(..., title='wl')


class TransmittanceSpectrum(BaseModel):
    value: Optional[Value] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    measureDate: Optional[DateTime] = Field(None, title='measureDate')
    startWL: Optional[Short] = Field(None, title='startWL')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ColorRGB(BaseModel):
    maxRange: Optional[Short] = Field(None, title='maxRange')
    r: Short = Field(..., title='r')
    g: Short = Field(..., title='g')
    b: Short = Field(..., title='b')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')
    profileSpecification: Optional[NCName] = Field(None, title='profileSpecification')


class Quantity(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    units: Optional[String] = Field(None, title='units')


class Length(BaseModel):
    value: Optional[Double] = Field(None, title='value')
    units: Optional[String] = Field(..., title='units')


class Observer(BaseModel):
    value: Optional[String] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    angle: Optional[Short] = Field(None, title='angle')
    age: Optional[Short] = Field(None, title='age')


class PrivateSpectrum(BaseModel):
    value: Optional[Base64Binary] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    keyID: Optional[String] = Field(..., title='keyID')
    measureDate: Optional[DateTime] = Field(None, title='measureDate')
    startWL: Optional[Short] = Field(None, title='startWL')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class ReflectanceSpectrum(BaseModel):
    value: Optional[Value] = Field(None, title='value')
    name: Optional[String] = Field(None, title='name')
    measureDate: Optional[DateTime] = Field(None, title='measureDate')
    startWL: Optional[Short] = Field(None, title='startWL')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class SerialNumber(BaseModel):
    pass


class ESpectrumType(BaseModel):
    pass


class EFinishType(BaseModel):
    pass


class ESubstrateType(BaseModel):
    pass


class EDeviceClassType(BaseModel):
    pass


class EDensityFilterType(BaseModel):
    pass


class EDensityStatusType(BaseModel):
    pass


class EFilterType(BaseModel):
    pass


class EAstmTableType(BaseModel):
    pass


class EEmissiveModeType(BaseModel):
    pass


class ELuminanceUnits(BaseModel):
    pass


class ESingleAngleConfigurationType(BaseModel):
    pass


class EDeviceIlluminationType(BaseModel):
    pass


class ETargetType(BaseModel):
    pass


class ESphereType(BaseModel):
    pass


class QName1(BaseModel):
    namespaceURI: Optional[Union[AnyURI, NamespaceURI87]] = None
    localPart: NCName
    prefix: Optional[Union[NCName, Prefix]] = None


class QName(BaseModel):
    __root__: Optional[QName1] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#QName'
    )


class NOTATION(BaseModel):
    __root__: Optional[QName] = Field(
        ..., description='http://www.w3.org/TR/xmlschema-2/#NOTATION'
    )


class SingleAngleType(BaseModel):
    singleAngleConfiguration: ESingleAngleConfigurationType = Field(
        ..., title='singleAngleConfiguration'
    )
    illuminationAngle: Optional[Double] = Field(..., title='illuminationAngle')
    measurementAngle: Optional[Double] = Field(..., title='measurementAngle')


class SubstrateType(BaseModel):
    value: Optional[ESubstrateType] = Field(None, title='value')
    otherType: Optional[String] = Field(None, title='otherType')


class DeviceFilterType(BaseModel):
    value: Optional[EFilterType] = Field(None, title='value')
    filterDescription: Optional[String] = Field(None, title='filterDescription')
    filterPosition: Optional[Double] = Field(None, title='filterPosition')


class ColorDensity(BaseModel):
    density: Optional[Double] = Field(..., title='density')
    status: EDensityStatusType = Field(..., title='status')
    filter: EDensityFilterType = Field(..., title='filter')
    baseOffset: Optional[Double] = Field(None, title='baseOffset')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')


class FinishType(BaseModel):
    value: Optional[EFinishType] = Field(None, title='value')
    otherType: Optional[String] = Field(None, title='otherType')


class Resources(BaseModel):
    objectCollection: Optional[ObjectCollection] = Field(None, title='objectCollection')
    colorSpecificationCollection: Optional[ColorSpecificationCollection] = Field(
        None, title='colorSpecificationCollection'
    )
    profileCollection: Optional[ProfileCollection] = Field(
        None, title='profileCollection'
    )


class CxF(BaseModel):
    fileInformation: Optional[FileInformation] = Field(None, title='fileInformation')
    resources: Optional[Resources] = Field(None, title='resources')
    customResources: Optional[CustomResources] = Field(None, title='customResources')


class DeviceIllumination(BaseModel):
    value: Optional[EDeviceIlluminationType] = Field(None, title='value')
    customType: Optional[String] = Field(None, title='customType')


class ProfileType(BaseModel):
    profileChoice: ProfileType_1.ProfileChoice = Field(..., title='profileChoice')
    parameters: Optional[Parameters] = Field(None, title='parameters')
    created: Optional[DateTime] = Field(None, title='created')
    id: ID = Field(..., title='id')
    direction: Optional[String] = Field(..., title='direction')


class GeometryChoiceType(BaseModel):
    emissiveMode: EEmissiveModeType = Field(..., title='emissiveMode')
    sphereGeometry: ESphereType = Field(..., title='sphereGeometry')
    singleAngle: SingleAngleType = Field(..., title='singleAngle')
    unknownGeometry: Optional[String] = Field(..., title='unknownGeometry')
    multiAngle: MultiAngleType = Field(..., title='multiAngle')


class DeltaCIELab(BaseModel):
    dl: Optional[Double] = Field(None, title='dl')
    da: Optional[Double] = Field(None, title='da')
    db: Optional[Double] = Field(None, title='db')
    dc: Optional[Double] = Field(None, title='dc')
    dh: Optional[Double] = Field(None, title='dh')
    de: Optional[Double] = Field(None, title='de')
    dEcmc: Optional[DEcmcType] = Field(None, title='dEcmc')
    de94: Optional[DE94Type] = Field(None, title='de94')
    de2000: Optional[DE2000Type] = Field(None, title='de2000')
    name: Optional[String] = Field(None, title='name')
    colorSpecification: NCName = Field(..., title='colorSpecification')
    standardRef: NCName = Field(..., title='standardRef')


class Device(BaseModel):
    manufacturer: Optional[String] = Field(None, title='manufacturer')
    model: Optional[String] = Field(None, title='model')
    serialNumber: Optional[String] = Field(None, title='serialNumber')
    deviceClass: Optional[EDeviceClassType] = Field(None, title='deviceClass')
    deviceFilter: Optional[DeviceFilterType] = Field(None, title='deviceFilter')
    deviceIllumination: Optional[DeviceIllumination] = Field(
        None, title='deviceIllumination'
    )
    devicePolarization: Optional[Boolean] = Field(None, title='devicePolarization')


class Density(BaseModel):
    name: Optional[QName] = None
    value: Optional[Double] = None


class Colorant(BaseModel):
    partNumber: Optional[String] = Field(None, title='partNumber')
    density: Optional[Density] = Field(None, title='density')
    value: Optional[Double] = Field(..., title='value')
    name: Optional[String] = Field(..., title='name')
    id: Optional[String] = Field(None, title='id')
    isBase: Optional[Boolean] = Field(None, title='isBase')


class GeometryChoice(GeometryChoiceType):
    pass


class MeasurementSpec(BaseModel):
    measurementType: ESpectrumType = Field(..., title='measurementType')
    geometryChoice: GeometryChoice = Field(..., title='geometryChoice')
    wavelengthRange: Optional[WavelengthRange] = Field(None, title='wavelengthRange')
    luminanceUnitsType: Optional[ELuminanceUnits] = Field(
        None, title='luminanceUnitsType'
    )
    calibrationStandard: Optional[String] = Field(None, title='calibrationStandard')
    aperture: Optional[String] = Field(None, title='aperture')
    backing: Optional[String] = Field(None, title='backing')
    bandpassCorrected: Optional[Boolean] = Field(None, title='bandpassCorrected')
    device: Optional[Device] = Field(None, title='device')


class TargetType(BaseModel):
    value: Optional[ETargetType] = Field(None, title='value')
    otherType: Optional[String] = Field(None, title='otherType')


class TristimulusSpec(BaseModel):
    illuminant: Illuminant = Field(..., title='illuminant')
    customIlluminant: CustomIlluminant = Field(..., title='customIlluminant')
    observer: Observer = Field(..., title='observer')
    method: EAstmTableType = Field(..., title='method')


class Name(BaseModel):
    localPart: Optional[LocalPart] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model1(BaseModel):
    name: Optional[Name] = None
    value: Optional[Colorant] = None


class Name1(BaseModel):
    localPart: Optional[LocalPart1] = None
    namespaceURI: Optional[NamespaceURI] = None


class Name2(BaseModel):
    localPart: Optional[LocalPart2] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model3(BaseModel):
    name: Optional[Name2] = None
    value: Optional[ELuminanceUnits] = None


class Name3(BaseModel):
    localPart: Optional[LocalPart3] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model4(BaseModel):
    name: Optional[Name3] = None
    value: Optional[Resources] = None


class Name4(BaseModel):
    localPart: Optional[LocalPart4] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model5(BaseModel):
    name: Optional[Name4] = None
    value: Optional[CustomIlluminant] = None


class Name5(BaseModel):
    localPart: Optional[LocalPart5] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model6(BaseModel):
    name: Optional[Name5] = None
    value: Optional[PrivateSpectrum] = None


class Name6(BaseModel):
    localPart: Optional[LocalPart6] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model7(BaseModel):
    name: Optional[Name6] = None
    value: Optional[CxF] = None


class Name7(BaseModel):
    localPart: Optional[LocalPart7] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model8(BaseModel):
    name: Optional[Name7] = None
    value: Optional[ColorDifferenceValues] = None


class Name8(BaseModel):
    localPart: Optional[LocalPart8] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model9(BaseModel):
    name: Optional[Name8] = None
    value: Optional[String] = None


class Name9(BaseModel):
    localPart: Optional[LocalPart9] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model10(BaseModel):
    name: Optional[Name9] = None
    value: Optional[Width] = None


class Name10(BaseModel):
    localPart: Optional[LocalPart10] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model11(BaseModel):
    name: Optional[Name10] = None
    value: Optional[TagCollection] = None


class Name11(BaseModel):
    localPart: Optional[LocalPart11] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model12(BaseModel):
    name: Optional[Name11] = None
    value: Optional[Double] = None


class Name12(BaseModel):
    localPart: Optional[LocalPart12] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model13(BaseModel):
    name: Optional[Name12] = None
    value: Optional[String] = None


class Name13(BaseModel):
    localPart: Optional[LocalPart13] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model14(BaseModel):
    name: Optional[Name13] = None
    value: Optional[SubstrateType] = None


class Name14(BaseModel):
    localPart: Optional[LocalPart14] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model15(BaseModel):
    name: Optional[Name14] = None
    value: Optional[Opacity] = None


class Name15(BaseModel):
    localPart: Optional[LocalPart15] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model16(BaseModel):
    name: Optional[Name15] = None
    value: Optional[ColorCIExyY] = None


class Name16(BaseModel):
    localPart: Optional[LocalPart16] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model17(BaseModel):
    name: Optional[Name16] = None
    value: Optional[ColorCMYKPlusN] = None


class Name17(BaseModel):
    localPart: Optional[LocalPart17] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model18(BaseModel):
    name: Optional[Name17] = None
    value: Optional[EAstmTableType] = None


class Name18(BaseModel):
    localPart: Optional[LocalPart18] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model19(BaseModel):
    name: Optional[Name18] = None
    value: Optional[TransmittanceSpectrum] = None


class Name19(BaseModel):
    localPart: Optional[LocalPart19] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model20(BaseModel):
    name: Optional[Name19] = None
    value: Optional[Double] = None


class Name20(BaseModel):
    localPart: Optional[LocalPart20] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model21(BaseModel):
    name: Optional[Name20] = None
    value: Optional[ColorCIELCh] = None


class Name21(BaseModel):
    localPart: Optional[LocalPart21] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model22(BaseModel):
    name: Optional[Name21] = None
    value: Optional[TristimulusSpec] = None


class Name22(BaseModel):
    localPart: Optional[LocalPart22] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model23(BaseModel):
    name: Optional[Name22] = None
    value: Optional[Observer] = None


class Name23(BaseModel):
    localPart: Optional[LocalPart23] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model24(BaseModel):
    name: Optional[Name23] = None
    value: Optional[ColorHTML] = None


class Name24(BaseModel):
    localPart: Optional[LocalPart24] = None
    namespaceURI: Optional[NamespaceURI] = None


class Name25(BaseModel):
    localPart: Optional[LocalPart25] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model26(BaseModel):
    name: Optional[Name25] = None
    value: Optional[CustomColorSpace] = None


class Name26(BaseModel):
    localPart: Optional[LocalPart26] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model27(BaseModel):
    name: Optional[Name26] = None
    value: Optional[CustomAttributeValue] = None


class Name27(BaseModel):
    localPart: Optional[LocalPart27] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model28(BaseModel):
    name: Optional[Name27] = None
    value: Optional[ESpectrumType] = None


class Name28(BaseModel):
    localPart: Optional[LocalPart28] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model29(BaseModel):
    name: Optional[Name28] = None
    value: Optional[DeltaCIELab] = None


class Name29(BaseModel):
    localPart: Optional[LocalPart29] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model30(BaseModel):
    name: Optional[Name29] = None
    value: Optional[CustomAttributeString] = None


class Name30(BaseModel):
    localPart: Optional[LocalPart30] = None
    namespaceURI: Optional[NamespaceURI] = None


class Name31(BaseModel):
    localPart: Optional[LocalPart31] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model32(BaseModel):
    name: Optional[Name31] = None
    value: Optional[DeviceFilterType] = None


class Name32(BaseModel):
    localPart: Optional[LocalPart32] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model33(BaseModel):
    name: Optional[Name32] = None
    value: Optional[Gloss] = None


class Name33(BaseModel):
    localPart: Optional[LocalPart33] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model34(BaseModel):
    name: Optional[Name33] = None
    value: Optional[MeasurementSpec] = None


class Name34(BaseModel):
    localPart: Optional[LocalPart34] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model35(BaseModel):
    name: Optional[Name34] = None
    value: Optional[EDeviceClassType] = None


class Name35(BaseModel):
    localPart: Optional[LocalPart35] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model36(BaseModel):
    name: Optional[Name35] = None
    value: Optional[SerialNumber] = None


class Name36(BaseModel):
    localPart: Optional[LocalPart36] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model37(BaseModel):
    name: Optional[Name36] = None
    value: Optional[ColorCIEXYZ] = None


class Name37(BaseModel):
    localPart: Optional[LocalPart37] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model38(BaseModel):
    name: Optional[Name37] = None
    value: Optional[ReflectanceSpectrum] = None


class Name38(BaseModel):
    localPart: Optional[LocalPart38] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model39(BaseModel):
    name: Optional[Name38] = None
    value: Optional[ColorValues] = None


class Name39(BaseModel):
    localPart: Optional[LocalPart39] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model40(BaseModel):
    name: Optional[Name39] = None
    value: Optional[ColorSRGB] = None


class Name40(BaseModel):
    localPart: Optional[LocalPart40] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model41(BaseModel):
    name: Optional[Name40] = None
    value: Optional[ColorHSL] = None


class Name41(BaseModel):
    localPart: Optional[LocalPart41] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model42(BaseModel):
    name: Optional[Name41] = None
    value: Optional[DateTime] = None


class Name42(BaseModel):
    localPart: Optional[LocalPart42] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model43(BaseModel):
    name: Optional[Name42] = None
    value: Optional[Double] = None


class Name43(BaseModel):
    localPart: Optional[LocalPart43] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model44(BaseModel):
    name: Optional[Name43] = None
    value: Optional[FileInformation] = None


class Name44(BaseModel):
    localPart: Optional[LocalPart44] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model45(BaseModel):
    name: Optional[Name44] = None
    value: Optional[ProfileType] = None


class Name45(BaseModel):
    localPart: Optional[LocalPart45] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model46(BaseModel):
    name: Optional[Name45] = None
    value: Optional[ColorEmissiveCIExyY] = None


class Name46(BaseModel):
    localPart: Optional[LocalPart46] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model47(BaseModel):
    name: Optional[Name46] = None
    value: Optional[PrivateColorValues] = None


class Name47(BaseModel):
    localPart: Optional[LocalPart47] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model48(BaseModel):
    name: Optional[Name47] = None
    value: Optional[ColorEmissiveCIEXYZ] = None


class Name48(BaseModel):
    localPart: Optional[LocalPart48] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model49(BaseModel):
    name: Optional[Name48] = None
    value: Optional[ImageType] = None


class Name49(BaseModel):
    localPart: Optional[LocalPart49] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model50(BaseModel):
    name: Optional[Name49] = None
    value: Optional[ColorAdobeRGB] = None


class Name50(BaseModel):
    localPart: Optional[LocalPart50] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model51(BaseModel):
    name: Optional[Name50] = None
    value: Optional[Tag] = None


class Name51(BaseModel):
    localPart: Optional[LocalPart51] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model52(BaseModel):
    name: Optional[Name51] = None
    value: Optional[Height] = None


class Name52(BaseModel):
    localPart: Optional[LocalPart52] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model53(BaseModel):
    name: Optional[Name52] = None
    value: Optional[Device] = None


class Name53(BaseModel):
    localPart: Optional[LocalPart53] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model54(BaseModel):
    name: Optional[Name53] = None
    value: Optional[Double] = None


class Name54(BaseModel):
    localPart: Optional[LocalPart54] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model55(BaseModel):
    name: Optional[Name54] = None
    value: Optional[ObjectCollection] = None


class Name55(BaseModel):
    localPart: Optional[LocalPart55] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model56(BaseModel):
    name: Optional[Name55] = None
    value: Optional[ColorCIELuv] = None


class Name56(BaseModel):
    localPart: Optional[LocalPart56] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model57(BaseModel):
    name: Optional[Name56] = None
    value: Optional[EmissiveSpectrum] = None


class Name57(BaseModel):
    localPart: Optional[LocalPart57] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model58(BaseModel):
    name: Optional[Name57] = None
    value: Optional[ColorCMYK] = None


class Name58(BaseModel):
    localPart: Optional[LocalPart58] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model59(BaseModel):
    name: Optional[Name58] = None
    value: Optional[ESingleAngleConfigurationType] = None


class Name59(BaseModel):
    localPart: Optional[LocalPart59] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model60(BaseModel):
    name: Optional[Name59] = None
    value: Optional[ColorCIELab] = None


class Name60(BaseModel):
    localPart: Optional[LocalPart60] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model61(BaseModel):
    name: Optional[Name60] = None
    value: Optional[ColorSpecificationCollection] = None


class Name61(BaseModel):
    localPart: Optional[LocalPart61] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model62(BaseModel):
    name: Optional[Name61] = None
    value: Optional[Double] = None


class Name62(BaseModel):
    localPart: Optional[LocalPart62] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model63(BaseModel):
    name: Optional[Name62] = None
    value: Optional[DeviceColorValues] = None


class Name63(BaseModel):
    localPart: Optional[LocalPart63] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model64(BaseModel):
    name: Optional[Name63] = None
    value: Optional[Double] = None


class Name64(BaseModel):
    localPart: Optional[LocalPart64] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model65(BaseModel):
    name: Optional[Name64] = None
    value: Optional[ColorNotation] = None


class Name65(BaseModel):
    localPart: Optional[LocalPart65] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model66(BaseModel):
    name: Optional[Name65] = None
    value: Optional[TargetType] = None


class Name66(BaseModel):
    localPart: Optional[LocalPart66] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model67(BaseModel):
    name: Optional[Name66] = None
    value: Optional[Double] = None


class Name67(BaseModel):
    localPart: Optional[LocalPart67] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model68(BaseModel):
    name: Optional[Name67] = None
    value: Optional[SpotColorType] = None


class Name68(BaseModel):
    localPart: Optional[LocalPart68] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model69(BaseModel):
    name: Optional[Name68] = None
    value: Optional[DeltaCustom] = None


class Name69(BaseModel):
    localPart: Optional[LocalPart69] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model70(BaseModel):
    name: Optional[Name69] = None
    value: Optional[ProfileCollection] = None


class Name70(BaseModel):
    localPart: Optional[LocalPart70] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model71(BaseModel):
    name: Optional[Name70] = None
    value: Optional[CustomSpectrum] = None


class Name71(BaseModel):
    localPart: Optional[LocalPart71] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model72(BaseModel):
    name: Optional[Name71] = None
    value: Optional[ColorCustom] = None


class Name72(BaseModel):
    localPart: Optional[LocalPart72] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model73(BaseModel):
    name: Optional[Name72] = None
    value: Optional[ColorPantoneHexachrome] = None


class Name73(BaseModel):
    localPart: Optional[LocalPart73] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model74(BaseModel):
    name: Optional[Name73] = None
    value: Optional[GeometryChoice] = None


class Name74(BaseModel):
    localPart: Optional[LocalPart74] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model75(BaseModel):
    name: Optional[Name74] = None
    value: Optional[FinishType] = None


class Name75(BaseModel):
    localPart: Optional[LocalPart75] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model76(BaseModel):
    name: Optional[Name75] = None
    value: Optional[Illuminant] = None


class Name76(BaseModel):
    localPart: Optional[LocalPart76] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model77(BaseModel):
    name: Optional[Name76] = None
    value: Optional[ColorRecipe] = None


class Name77(BaseModel):
    localPart: Optional[LocalPart77] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model78(BaseModel):
    name: Optional[Name77] = None
    value: Optional[CustomResources] = None


class Name78(BaseModel):
    localPart: Optional[LocalPart78] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model79(BaseModel):
    name: Optional[Name78] = None
    value: Optional[DeviceIllumination] = None


class Name79(BaseModel):
    localPart: Optional[LocalPart79] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model80(BaseModel):
    name: Optional[Name79] = None
    value: Optional[Length] = None


class Name80(BaseModel):
    localPart: Optional[LocalPart80] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model81(BaseModel):
    name: Optional[Name80] = None
    value: Optional[ColorDensity] = None


class Name81(BaseModel):
    localPart: Optional[LocalPart81] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model82(BaseModel):
    name: Optional[Name81] = None
    value: Optional[Quantity] = None


class Name82(BaseModel):
    localPart: Optional[LocalPart82] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model83(BaseModel):
    name: Optional[Name82] = None
    value: Optional[BRDFAngle] = None


class Name83(BaseModel):
    localPart: Optional[LocalPart83] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model84(BaseModel):
    name: Optional[Name83] = None
    value: Optional[WavelengthRange] = None


class Name84(BaseModel):
    localPart: Optional[LocalPart84] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model85(BaseModel):
    name: Optional[Name84] = None
    value: Optional[ColorRGB] = None


class Name85(BaseModel):
    localPart: Optional[LocalPart85] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model86(BaseModel):
    name: Optional[Name85] = None
    value: Optional[SpectralPoint] = None


class Name86(BaseModel):
    localPart: Optional[LocalPart86] = None
    namespaceURI: Optional[NamespaceURI] = None


class Model87(BaseModel):
    name: Optional[Name86] = None
    value: Optional[Thickness] = None


class PhysicalAttributes(BaseModel):
    targetType: Optional[TargetType] = Field(None, title='targetType')
    finishType: Optional[FinishType] = Field(None, title='finishType')
    substrateType: Optional[SubstrateType] = Field(None, title='substrateType')
    quantity: Optional[Quantity] = Field(None, title='quantity')
    height: Optional[Height] = Field(None, title='height')
    width: Optional[Width] = Field(None, title='width')
    length: Optional[Length] = Field(None, title='length')
    thickness: Optional[Thickness] = Field(None, title='thickness')
    gloss: Optional[Gloss1] = Field(None, title='gloss')
    opacity: Optional[Opacity1] = Field(None, title='opacity')
    customAttributeString: Optional[CustomAttributeString1] = Field(
        None, title='customAttributeString'
    )
    customAttributeValue: Optional[CustomAttributeValue1] = Field(
        None, title='customAttributeValue'
    )
    image: Optional[Image] = Field(None, title='image')


class ColorSpecification(BaseModel):
    tristimulusSpec: Optional[TristimulusSpec] = Field(None, title='tristimulusSpec')
    measurementSpec: MeasurementSpec = Field(..., title='measurementSpec')
    physicalAttributes: Optional[PhysicalAttributes] = Field(
        None, title='physicalAttributes'
    )
    id: ID = Field(..., title='id')


class Object(BaseModel):
    creationDate: DateTime = Field(..., title='creationDate')
    comment: Optional[String] = Field(None, title='comment')
    colorValues: Optional[ColorValues] = Field(None, title='colorValues')
    colorDifferenceValues: Optional[ColorDifferenceValues] = Field(
        None, title='colorDifferenceValues'
    )
    deviceColorValues: Optional[DeviceColorValues] = Field(
        None, title='deviceColorValues'
    )
    tagCollection: Optional[TagCollection1] = Field(None, title='tagCollection')
    physicalAttributes: Optional[PhysicalAttributes] = Field(
        None, title='physicalAttributes'
    )
    objectType: Optional[String] = Field(..., title='objectType')
    name: Optional[String] = Field(..., title='name')
    id: NCName = Field(..., title='id')
    guid: Optional[String] = Field(None, title='guid')


class Model2(BaseModel):
    name: Optional[Name1] = None
    value: Optional[PhysicalAttributes] = None


class Model25(BaseModel):
    name: Optional[Name24] = None
    value: Optional[Object] = None


class Model31(BaseModel):
    name: Optional[Name30] = None
    value: Optional[ColorSpecification] = None


class Model(BaseModel):
    __root__: Union[
        Model1,
        Model2,
        Model3,
        Model4,
        Model5,
        Model6,
        Model7,
        Model8,
        Model9,
        Model10,
        Model11,
        Model12,
        Model13,
        Model14,
        Model15,
        Model16,
        Model17,
        Model18,
        Model19,
        Model20,
        Model21,
        Model22,
        Model23,
        Model24,
        Model25,
        Model26,
        Model27,
        Model28,
        Model29,
        Model30,
        Model31,
        Model32,
        Model33,
        Model34,
        Model35,
        Model36,
        Model37,
        Model38,
        Model39,
        Model40,
        Model41,
        Model42,
        Model43,
        Model44,
        Model45,
        Model46,
        Model47,
        Model48,
        Model49,
        Model50,
        Model51,
        Model52,
        Model53,
        Model54,
        Model55,
        Model56,
        Model57,
        Model58,
        Model59,
        Model60,
        Model61,
        Model62,
        Model63,
        Model64,
        Model65,
        Model66,
        Model67,
        Model68,
        Model69,
        Model70,
        Model71,
        Model72,
        Model73,
        Model74,
        Model75,
        Model76,
        Model77,
        Model78,
        Model79,
        Model80,
        Model81,
        Model82,
        Model83,
        Model84,
        Model85,
        Model86,
        Model87,
    ]
